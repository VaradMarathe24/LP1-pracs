import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

class Process {
    int pid; // Process ID
    int arrivalTime; // Arrival Time
    int burstTime; // Burst Time
    int remainingTime; // Remaining Burst Time
    int completionTime; // Completion Time
    int waitingTime; // Waiting Time
    int turnaroundTime; // Turnaround Time

    Process(int pid, int arrivalTime, int burstTime) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.remainingTime = burstTime;
    }
}

public class SJFPreemptive {
    private ArrayList<Process> processes;
    private ArrayList<Integer> ganttChart;

    public SJFPreemptive() {
        processes = new ArrayList<>();
        ganttChart = new ArrayList<>();
    }

    public void addProcess(int pid, int arrivalTime, int burstTime) {
        processes.add(new Process(pid, arrivalTime, burstTime));
    }

    public void execute() {
        int currentTime = 0;
        int completed = 0;
        int n = processes.size();

        while (completed < n) {
            // Get process with the smallest remaining time that has arrived
            Process currentProcess = null;
            int minRemainingTime = Integer.MAX_VALUE;

            for (Process p : processes) {
                if (p.arrivalTime <= currentTime && p.remainingTime > 0 && p.remainingTime < minRemainingTime) {
                    minRemainingTime = p.remainingTime;
                    currentProcess = p;
                }
            }

            if (currentProcess != null) {
                ganttChart.add(currentProcess.pid);
                currentProcess.remainingTime--;
                currentTime++;

                if (currentProcess.remainingTime == 0) {
                    currentProcess.completionTime = currentTime;
                    currentProcess.turnaroundTime = currentProcess.completionTime - currentProcess.arrivalTime;
                    currentProcess.waitingTime = currentProcess.turnaroundTime - currentProcess.burstTime;
                    completed++;
                }
            } else {
                ganttChart.add(-1); // Idle time
                currentTime++;
            }
        }
    }

    public void printGanttChart() {
        System.out.println("\nGantt Chart:");
        for (int i = 0; i < ganttChart.size(); i++) {
            if (i == 0 || ganttChart.get(i) != ganttChart.get(i - 1)) {
                if (ganttChart.get(i) == -1) {
                    System.out.print("| Idle ");
                } else {
                    System.out.print("| P" + ganttChart.get(i) + " ");
                }
            }
        }
        System.out.println("|");
    }

    public void printProcessDetails() {
        System.out.printf("\n%-10s%-15s%-15s%-15s%-15s%-15s\n", "PID", "Arrival Time", "Burst Time", "Completion Time", "Waiting Time", "Turnaround Time");
        for (Process p : processes) {
            System.out.printf("%-10d%-15d%-15d%-15d%-15d%-15d\n", p.pid, p.arrivalTime, p.burstTime, p.completionTime, p.waitingTime, p.turnaroundTime);
        }
    }

    public static void main(String[] args) {
        SJFPreemptive scheduler = new SJFPreemptive();
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        for (int i = 1; i <= n; i++) {
            System.out.print("Enter arrival time for process " + i + ": ");
            int arrivalTime = sc.nextInt();
            System.out.print("Enter burst time for process " + i + ": ");
            int burstTime = sc.nextInt();
            scheduler.addProcess(i, arrivalTime, burstTime);
        }

        scheduler.execute();
        scheduler.printProcessDetails();
        scheduler.printGanttChart();
        sc.close();
    }
}
